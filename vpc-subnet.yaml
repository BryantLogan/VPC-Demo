Resources:
# Create VPC
  DemoVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      Tags:
        - 
          Key: "DemoVPC"
          Value: "AWS::StackName"

# Create 2 public subnets
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: 
        Ref: "DemoVPC"      
      AvailabilityZone: "us-east-1a"
      CidrBlock: "10.0.0.0/24"
      Tags:
        -
          Key: "Name"
          Value: "PublicSubnetA"

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: 
        Ref: "DemoVPC"      
      AvailabilityZone: "us-east-1b"
      CidrBlock: "10.0.1.0/24"
      Tags:
        -
          Key: "Name"
          Value: "PublicSubnetB"

# Create 2 private subnets
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: 
        Ref: "DemoVPC"      
      AvailabilityZone: "us-east-1a"
      CidrBlock: "10.0.16.0/20"
      Tags:
        -
          Key: "Name"
          Value: "PrivateSubnetA"

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: 
        Ref: "DemoVPC"      
      AvailabilityZone: "us-east-1b"
      CidrBlock: "10.0.32.0/20"
      Tags:
        -
          Key: "Name"
          Value: "PrivateSubnetB"

# Create security group to allow SSH for EC2 Instance
  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: "DemoVPC"
      GroupDescription: "Enable SSH access via port 22"
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          FromPort: 22
          IpProtocol: "tcp"
          ToPort: 22

# Create EC2 Instance in public subnet A with public IPv4 address
  Ec2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: "ami-09d3b3274b6c5d4aa"
      InstanceType: "t2.micro"
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - !Ref SSHSecurityGroup
          SubnetId:
            Ref: "PublicSubnetA"


# Create Internet Gateway
  DemoIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        -
          Key: "Name"
          Value: "DemoVPC-IGW"

# At this point, the instance still has no connectivity
# Need to create route tables

# Attach IGW to VPC
  IGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: "DemoIGW"
      VpcId:
        Ref: "DemoVPC"

# Create Public Route Table
  myPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: "DemoVPC"

# Create public route
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: "DemoIGW"
    Properties:
      RouteTableId:
        Ref: "myPublicRouteTable"
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId:
        Ref: "DemoIGW"

# Create a route table association for Public Subnet A
# EC2 Instance can now be used as a bastion host
# In order to SSH into instances within private subnets
  PublicRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: "PublicSubnetA"
      RouteTableId:
        Ref: "myPublicRouteTable"

# Create a route table association for Public Subnet B
  PublicRouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: "PublicSubnetB"
      RouteTableId:
        Ref: "myPublicRouteTable"

# Create Key Pair to SSH into instance in private subnet
  DemoVPCKeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: DemoVPCKeyPair

# Create security group that allows SSH from bastion host
  BastionHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: "DemoVPC"
      GroupDescription: "Allow SSH from Bastion Host"
      SecurityGroupIngress:
        FromPort: 22
        IpProtocol: "tcp"
        ToPort: 22
        SourceSecurityGroupId:
          Ref: "SSHSecurityGroup"      

# Create EC2 Instance within private subnet A
# Reference newly created Key Pair
  PrivateEc2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: "ami-09d3b3274b6c5d4aa"
      InstanceType: "t2.micro"
      KeyName: 
        Ref: "DemoVPCKeyPair"
      NetworkInterfaces:
        - DeviceIndex: "0"
          GroupSet:
            - !Ref BastionHostSecurityGroup
          SubnetId:
            Ref: "PrivateSubnetA"
      IamInstanceProfile: !Ref DemoPrivateInstanceProfile

# Create Private Route Table
  myPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: "DemoVPC"

# Create a route table association for Private Subnet A
  PrivateRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: "PrivateSubnetA"
      RouteTableId:
        Ref: "myPrivateRouteTable"

# Create a route table association for Private Subnet B
  PrivateRouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: "PrivateSubnetB"
      RouteTableId:
        Ref: "myPrivateRouteTable"

# Create NAT Gateway
  DemoNATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt "NATGatewayEIP.AllocationId"
      SubnetId: !Ref "PublicSubnetA"

# Create NAT Gateway EIP
  NATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: "vpc"

# Add route to NAT Gateway to Private Route Table
  # RouteNATGateway:
  #   DependsOn: DemoNATGateway
  #   Type: AWS::EC2::Route
  #   Properties:
  #     RouteTableId: !Ref myPrivateRouteTable
  #     DestinationCidrBlock: "0.0.0.0/0"
  #     NatGatewayId: !Ref DemoNATGateway

# Add security group rule for http to Bastion Host SG
  HTTPSecurityGroupRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SSHSecurityGroup
      IpProtocol: "tcp"
      FromPort: 80
      ToPort: 80
      CidrIp: "0.0.0.0/0"

# Create new SG for EC2 instance in default VPC to allow SSH from any IP
  DefaultSSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Enable SSH access via port 22"
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          FromPort: 22
          IpProtocol: "tcp"
          ToPort: 22

# ------ Must create the new SG before creating default EC2 instance ------
# Create EC2 instance in default VPC with SSH from any IP
  DefaultVPCInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: "ami-09d3b3274b6c5d4aa"
      InstanceType: "t2.micro"
      SecurityGroups:
        - !Ref DefaultSSHSecurityGroup

# Create Peering connection between default VPC and demo VPC
  DemoPeeringConnection:
    Type: AWS::EC2::VPCPeeringConnection
    Properties:
      VpcId: # Demo vpc id here
      PeerVpcId: # Default vpc id here

# Modify Public Route Table
  VPCPeeringPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: "myPublicRouteTable"
      DestinationCidrBlock: "" # <---- your default vpc cidr in this string
      VpcPeeringConnectionId: !Ref DemoPeeringConnection

# Create IAM role for EC2
  DemoEC2RoleForS3ReadOnly:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ssm.amazonaws.com
            - ec2.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      Path: "/"

# Create instance profile for EC2 instance in private subnet
  DemoPrivateInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: demo-private-instance-profile
      Path: /
      Roles:
        - !Ref DemoEC2RoleForS3ReadOnly

# Attach role to private EC2 instance
# Add following code to properties for instance in private VPC:
# IamInstanceProfile: !Ref DemoPrivateInstanceProfile

# ---- VPC Endpoints ---- 

# Remove route in private route table to NAT Gateway on line 225 - 231
# This will prevent private instance to access the internet

# Create VPC Endpoint
  PrivateInstanceS3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
      - !Ref myPrivateRouteTable
      ServiceName: 'com.amazonaws.us-east-1.s3'
      VpcEndpointType: 'Gateway'
      VpcId: !Ref DemoVPC

# Create S3 bucket for flow log destination
  DemoS3FlowLogBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: vpc-demo-flow-log-bucket-bryant

# Create VPC Flow Log to S3 bucket 
  DemoVPCFlowLog:
    DependsOn: DemoS3FlowLogBucket
    Type: AWS::EC2::FlowLog
    Properties:
      TrafficType: ALL
      ResourceId: !Ref DemoVPC
      ResourceType: VPC
      MaxAggregationInterval: 60
      LogDestinationType: s3
      LogDestination: !GetAtt DemoS3FlowLogBucket.Arn

# Create role that allows EC2 to publish flow logs to CW logs group
  FlowLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'vpc-flow-logs.amazonaws.com'
          Action: 'sts:AssumeRole'
      Policies:
      - PolicyName: 'flowlogs-policy'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            - 'logs:DescribeLogGroups'
            - 'logs:DescribeLogStreams'
            Resource: !GetAtt CWLogGroup.Arn

# Create log group for CW VPC Flow log
  CWLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 1

# Create VPC Flow Log to CloudWatch Logs
  DemoVPCFlowLogCW:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !GetAtt FlowLogsRole.Arn
      TrafficType: ALL
      ResourceId: !Ref DemoVPC
      ResourceType: VPC
      LogGroupName: !Ref CWLogGroup
      MaxAggregationInterval: 60

# Create s3 bucket for Athena query results
  DemoS3AthenaBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: vpc-demo-athena-log-bucket-bryant

